// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")

}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  telephone String
  password  String
  gender    String   // Use enum for stricter type enforcement
  role      String   // Use enum for stricter type enforcement
  status    String?
  school    School?  @relation("SchoolUsers", fields: [schoolId], references: [id])
  schoolId  Int?
  addedBy   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model School {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  email       String   @unique
  phoneNumber String
  principal   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]   @relation("SchoolUsers")
  students    Student[]
}

model Student {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  indexNo   String   @unique
  email     String   @unique
  phone     String
  gender    String
  paid      Boolean  @default(false)   
  class     String
  school    School   @relation(fields: [schoolId], references: [id])
  subjects  Subject[] @relation("StudentSubjects")
  results   SubjectPaperResults[] @relation("StudentSubjectResults")
  schoolId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  description String?
  class       String? @default("S.4")
  papers    SubjectPapers[] @relation("SubjectPapers")
  students  Student[] @relation("StudentSubjects")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubjectPapers {
  id        Int      @id @default(autoincrement())
  subject   Subject   @relation("SubjectPapers", fields: [subjectId], references: [id])
  subjectId Int
  paper     String
  results   SubjectPaperResults[] @relation("SubjectPapers")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubjectPaperResults {
  id        Int      @id @default(autoincrement())
  student   Student   @relation("StudentSubjectResults", fields: [studentId], references: [id])
  studentId Int
  subjectpaper   SubjectPapers   @relation("SubjectPapers", fields: [subjectpaperId], references: [id])
  subjectpaperId Int
  result    Float
  added_by Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GradeSystem {
  id         Int          @id @default(autoincrement())
  name       String       @unique // "O-Level" or "A-Level"
  gradeRanges GradeRange[]
}

model GradeRange {
  id           Int         @id @default(autoincrement())
  grade        String      
  min          Int
  max          Int
  gradeSystem  GradeSystem @relation(fields: [gradeSystemId], references: [id])
  gradeSystemId Int
  
  @@unique([gradeSystemId, grade])
}

